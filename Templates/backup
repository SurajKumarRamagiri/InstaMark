admin_settings

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Settings</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"></link>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
</head>
<body class="bg-gradient-to-r from-blue-100 to-purple-100 font-roboto">
    <div class="min-h-screen flex flex-col">
        <!-- Main Content -->
        <main class="flex-grow container mx-auto px-6 py-8">
            <h2 class="text-4xl font-bold text-gray-800 mb-6 text-center">Settings</h2>
            <div class="bg-gradient-to-r from-blue-100 to-blue-200 shadow-xl rounded-lg p-8">
                <form>
                    <!-- General Settings -->
                    <div class="mb-8">
                        <h3 class="text-2xl font-semibold text-gray-800 mb-4">General Settings</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label for="site-name" class="block text-gray-700 font-medium">Site Name</label>
                                <input type="text" id="site-name" class="mt-1 block w-3/4 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Enter site name">
                            </div>
                            <div>
                                <label for="admin-email" class="block text-gray-700 font-medium">Admin Email</label>
                                <input type="email" id="admin-email" class="mt-1 block w-3/4 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Enter admin email">
                            </div>
                        </div>
                    </div>

                    <!-- Face Recognition Settings -->
                    <div class="mb-8">
                        <h3 class="text-2xl font-semibold text-gray-800 mb-4">Face Recognition Settings</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label for="recognition-threshold" class="block text-gray-700 font-medium">Recognition Threshold</label>
                                <input type="number" id="recognition-threshold" class="mt-1 block w-3/4 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Enter threshold value">
                            </div>
                            <div>
                                <label for="max-retries" class="block text-gray-700 font-medium">Max Retries</label>
                                <input type="number" id="max-retries" class="mt-1 block w-3/4 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Enter max retries">
                            </div>
                        </div>
                    </div>

                    <!-- Security Settings -->
                    <div class="mb-8">
                        <h3 class="text-2xl font-semibold text-gray-800 mb-4">Security Settings</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label for="password-policy" class="block text-gray-700 font-medium">Password Policy</label>
                                <select id="password-policy" class="mt-1 block w-3/4 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
                                    <option value="strong">Strong</option>
                                    <option value="medium">Medium</option>
                                    <option value="weak">Weak</option>
                                </select>
                            </div>
                            <div>
                                <label for="two-factor-auth" class="block text-gray-700 font-medium">Two-Factor Authentication</label>
                                <select id="two-factor-auth" class="mt-1 block w-3/4 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
                                    <option value="enabled">Enabled</option>
                                    <option value="disabled">Disabled</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Appearance Settings -->
                    <div class="mb-8">
                        <h3 class="text-2xl font-semibold text-gray-800 mb-4">Appearance Settings</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label for="theme" class="block text-gray-700 font-medium">Theme</label>
                                <select id="theme" class="mt-1 block w-3/4 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
                                    <option value="light">Light</option>
                                    <option value="dark">Dark</option>
                                </select>
                            </div>
                            <div>
                                <label for="logo" class="block text-gray-700 font-medium">Logo</label>
                                <input type="file" id="logo" class="mt-1 block w-3/4 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            </div>
                        </div>
                    </div>

                    <!-- User Management Settings -->
                    <div class="mb-8">
                        <h3 class="text-2xl font-semibold text-gray-800 mb-4">User Management Settings</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label for="user-roles" class="block text-gray-700 font-medium">User Roles</label>
                                <select id="user-roles" class="mt-1 block w-3/4 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
                                    <option value="admin">superuser</option>
                                    <option value="editor">manager</option>
                                    <option value="viewer">regular</option>
                                </select>
                            </div>
                            <div>
                                <label for="account-activation" class="block text-gray-700 font-medium">Account Activation</label>
                                <select id="account-activation" class="mt-1 block w-3/4 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
                                    <option value="auto">Automatic</option>
                                    <option value="manual">Manual</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- manage_departments.html -->
                    <div class="mb-8">
                        <h3 class="text-2xl font-semibold text-gray-800 mb-4">Manage Departments</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <form method="POST" action="{% url 'manage_departments' %}">
                                {% csrf_token %}
                                <div>
                                    <label for="name" class="block text-gray-700 font-medium">Department Name</label>
                                    <input type="text" id="name" name="name" class="mt-1 block w-3/4 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Enter department name" required>
                                </div>
                                <div class="flex items-end">
                                    <button type="submit" name="add_department" class="bg-green-600 text-white px-4 py-2 rounded-lg shadow-sm hover:bg-green-700">Add Department</button>
                                </div>
                            </form>
                        </div>
                        <div class="mt-6">
                            <h4 class="text-lg font-semibold text-gray-800 mb-4">Existing Departments</h4>
                            <ul class="space-y-4">
                                {% for department in departments %}
                                    <li class="flex justify-between items-center bg-gray-100 p-4 rounded-lg shadow-sm">
                                        <span id="department-name-{{ department.id }}">{{ department.name }}</span>
                                        <div class="flex space-x-2">
                                            <form method="POST" action="{% url 'manage_departments' %}" class="edit-form" style="display: none;">
                                                {% csrf_token %}
                                                <input type="hidden" name="department_id" value="{{ department.id }}">
                                                <input type="text" name="name" value="{{ department.name }}" required>
                                                <button type="submit" name="edit_department" class="bg-yellow-500 text-white px-3 py-1 rounded-lg shadow-sm hover:bg-yellow-600">Save</button>
                                                <button type="button" class="bg-red-600 text-white px-3 py-1 rounded-lg shadow-sm hover:bg-red-700" onclick="toggleEdit('{{ department.id }}', false)">Cancel</button>
                                            </form>

                                            <button onclick="toggleEdit('{{ department.id }}', true)" class="bg-yellow-500 text-white px-3 py-1 rounded-lg shadow-sm hover:bg-yellow-600">Edit</button>
                                            <form method="POST" action="{% url 'manage_departments' %}" style="display: inline;">
                                                {% csrf_token %}
                                                <input type="hidden" name="department_id" value="{{ department.id }}">
                                                <button type="submit" name="delete_department" class="bg-red-600 text-white px-3 py-1 rounded-lg shadow-sm hover:bg-red-700" onclick="return confirm('Are you sure you want to delete this department?');">Delete</button>
                                            </form>
                                        </div>
                                    </li>
                                {% empty %}
                                    <p>No departments available.</p>
                                {% endfor %}
                            </ul>
                        </div>
                    </div>

                    <script>
                        function toggleEdit(departmentId, show) {
                            const editForm = document.querySelector(`.edit-form input[type="hidden"][value="${departmentId}"]`).closest('form');
                            if (show) {
                                editForm.style.display = 'block';
                            } else {
                                editForm.style.display = 'none';
                            }
                        }
                    </script>

                    <!-- Save Button -->
                    <div class="flex justify-end">
                        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-lg shadow-sm hover:bg-blue-700">Save Settings</button>
                    </div>
                </form>
            </div>
        </main>
    </div>
</body>
</html>
<script>
    function toggleEdit(departmentId, isEditing) {
        const nameSpan = document.getElementById(`department-name-${departmentId}`);
        const editForm = nameSpan.nextElementSibling;

        if (isEditing) {
            nameSpan.style.display = 'none';
            editForm.style.display = 'inline-block';
        } else {
            nameSpan.style.display = 'inline-block';
            editForm.style.display = 'none';
        }
    }
</script>


admin base


<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
    <title>{% block title %}Admin Dashboard - InstaMark{% endblock %}</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet"/>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #F4F4F4;
            margin: 0;
            padding: 0;
        }
        header {
            background-color: #007BFF;
            color: white;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        header .logo {
            font-size: 1.5em;
            font-weight: 700;
        }
        header .profile {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-left: auto;
        }
        header .profile img {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
        }
        header .profile .dropdown {
            position: relative;
        }
        header .profile .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            z-index: 10000;
        }
        header .profile .dropdown-content a {
            color: #333;
            padding: 10px 20px;
            text-decoration: none;
            display: block;
        }
        header .profile .dropdown-content a:hover {
            background-color: #f1f1f1;
        }
        header .profile .dropdown:hover .dropdown-content {
            display: block;
        }
        header .notifications {
            position: relative;
        }
        header .notifications .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: rgb(0, 0, 0);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            z-index: 10000;
            width: 300px;
        }
        header .notifications .dropdown-content ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        header .notifications .dropdown-content ul li {
            padding: 10px 20px;
            border-bottom: 1px solid #000000;
        }
        header .notifications .dropdown-content ul li:last-child {
            border-bottom: none;
        }
        header .notifications .dropdown-content ul li:hover {
            background-color: #000000;
        }
        header .notifications:hover .dropdown-content {
            display: block;
        }
        .sidebar {
            width: 60px;
            background-color: #007BFF;
            color: white;
            position: fixed;
            top: 60px;
            bottom: 0;
            padding: 20px 0;
            overflow-y: auto;
            transition: width 0.3s;
        }
        .sidebar:hover {
            width: 250px;
        }
        .sidebar a {
            color: white;
            text-decoration: none;
            display: flex;
            align-items: center;
            padding: 10px 20px;
            gap: 10px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .sidebar a i {
            font-size: 1.5em;
            width: 40px;
            text-align: center;
        }
        .sidebar a span {
            display: none;
            transition: display 0.3s;
        }
        .sidebar:hover a span {
            display: inline;
        }
        .sidebar a:hover, .sidebar a.active {
            background-color: #0056b3;
        }
        .main-content {
            margin-left: 60px;
            padding: 20px;
            transition: margin-left 0.3s;
        }
        .sidebar:hover ~ .main-content {
            margin-left: 250px;
        }
        .card {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        .card .card-title {
            font-size: 1.2em;
            margin-bottom: 10px;
        }
        .card .card-content {
            display: flex;
            align-items: center;
            gap: 20px;
        }
        .card .card-content i {
            font-size: 2em;
            color: #007BFF;
        }
        .card .card-content .number {
            font-size: 2em;
            font-weight: 700;
        }
        .chart {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        .table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        .table th, .table td {
            padding: 10px;
            border: 1px solid #ddd;
        }
        .table th {
            background-color: #f1f1f1;
        }
        .table .actions {
            display: flex;
            gap: 10px;
        }
        .table .actions i {
            cursor: pointer;
        }
        .footer {
            background-color: #007BFF;
            color: white;
            text-align: center;
            padding: 5px 20px;
            position: fixed;
            bottom: 0;
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .footer a {
            color: white;
            text-decoration: none;
            margin: 0 10px;
        }
        .footer .social-icons {
            margin-left: 200px;
            margin-right: 40px;
        }
        .footer .social-icons i {
            margin: 0 5px;
        }
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            .main-content {
                margin-left: 0;
            }
            .footer {
                flex-direction: column;
                gap: 10px;
            }
            .footer .social-icons {
                margin-left: 0;
            }
        }
    </style>
</head>
<body>
<header>
    <div class="logo">
        InstaMark
    </div>
    <div class="profile">
        <span class="username">{{ user }}</span>
        <div class="notifications">
            <i class="fas fa-bell"></i>
            <div class="notification-overlay">
            <div class="dropdown-content">
                <ul>
                    <li>John Doe logged in at 10:00 AM</li>
                    <li>Jane Smith marked as absent</li>
                    <li>Michael Brown was late today</li>
                </ul>
            </div>
            </div>
        </div>
        <div class="dropdown">
            <img alt="Profile picture of the logged-in admin" height="30" src="https://storage.googleapis.com/a1aa/image/u6Ug78MplcYTDJtFbvCliftLFhhAJkaiXmSVo6p036Twq18JA.jpg" width="30"/>
            <div class="dropdown-content">
                <a href="#">Profile Settings</a>
                <a href="{% url 'logout' %}">Logout</a>
            </div>
        </div>
    </div>
</header>
<div class="sidebar">
    <a href="{% url 'admin_dashboard'%}">
        <i class="fas fa-tachometer-alt"></i>
        <span>Dashboard</span>
    </a>
    <a href="{% url 'admin_users' %}">
        <i class="fas fa-users"></i>
        <span>Users</span>
    </a>
    <a href="{% url 'admin_attendance' %}">
        <i class="fas fa-calendar-check"></i>
        <span>Attendance</span>
    </a>
    <a href="{% url 'admin_reports' %}">
        <i class="fas fa-chart-line"></i>
        <span>Attendance Reports</span>
    </a>
    <a href="{% url 'admin_settings' %}">
        <i class="fas fa-cogs"></i>
        <span>Settings</span>
    </a>
    <a href="{% url 'logout' %}">
        <i class="fas fa-sign-out-alt"></i>
        <span>Logout</span>
    </a>

</div>
<div class="main-content">
    {% block content %}
    // Main content will be injected here
    {% endblock %}
</div>
<footer class="footer">
    <div>
        © 2024 InstaMark. All Rights Reserved.
    </div>
    <div>
        <a href="#">Privacy Policy</a>
        <a href="#">Terms of Service</a>
        <a href="#">Support</a>
    </div>
    <div class="social-icons">
        <i class="fab fa-linkedin"></i>
        <i class="fab fa-twitter"></i>
        <i class="fab fa-facebook"></i>
    </div>
</footer>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const ctx = document.getElementById('attendanceChart') ? document.getElementById('attendanceChart').getContext('2d') : null;
    if (ctx) {
        const attendanceChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
                datasets: [{
                    label: 'Present',
                    data: [12, 19, 3, 5, 2, 3, 7],
                    borderColor: '#007BFF',
                    backgroundColor: 'rgba(0, 123, 255, 0.1)',
                    fill: true
                }, {
                    label: 'Absent',
                    data: [2, 3, 20, 5, 1, 4, 2],
                    borderColor: '#FF9900',
                    backgroundColor: 'rgba(255, 153, 0, 0.1)',
                    fill: true
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        beginAtZero: true
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }
</script>
</body>
</html> -->

admin_attendance 2

{% extends "admin_base.html" %}

{% block title %}Attendance Management - InstaMark{% endblock %}

{% block content %}
<script src="https://cdn.tailwindcss.com"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;display=swap" rel="stylesheet"/>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.9/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
<script async src="https://docs.opencv.org/4.x/opencv.js"  type="text/javascript"></script>



<style>
    #captureSection {
        position: relative;
        width: 100%;
        max-width: 600px; /* Adjust as needed */
        margin: auto;
    }
    video {
        width: 100%;
        height: auto;
    }
    canvas {
        position: absolute;
        top: 0;
        left: 0;
    }
    #status {
        margin-top: 10px;
        font-size: 16px;
        color: #666;
    }
    button {
        font-size: 1rem;
        font-weight: 600;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    button:hover {
        transform: scale(1.05); /* Slight zoom effect on hover */
    }

    button:active {
        transform: scale(0.95); /* Slight shrink effect on click */
    }

    #capture {
        background-color: #3b82f6; /* Blue */
    }

    #capture:hover {
        background-color: #2563eb; /* Darker blue */
    }

    #stop {
        background-color: #ef4444; /* Red */
    }

    #stop:hover {
        background-color: #dc2626; /* Darker red */
    }

</style>

<div class="container mx-auto p-4">
    <header class="flex justify-between items-center py-4">
        <h1 class="text-2xl font-bold">Attendance Management</h1>
    </header>
    
    <main class="mt-8">
        <section class="bg-white p-6 rounded-lg shadow-lg">
            <h2 class="text-xl font-semibold mb-4">Manage Attendance</h2>
            <div class="flex flex-col items-center">
                <div class="w-full md:w-2/3 lg:w-1/2">
                    <select class="w-full p-2 border border-gray-300 rounded-lg mb-4" id="department" name="department" required>
                        <option value="">Select Department</option>
                        {% for department in departments %}
                            <option value="{{ department.id }}">{{ department.name }}</option>
                        {% endfor %}
                    </select>
                    <button class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600" id="view-attendance">View Attendance</button>
                    <button class="mt-4 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600" id="take-attendance">Take Attendance</button>
                </div>
            </div>
        </section>

        <section class="mt-8 bg-white p-6 rounded-lg shadow-lg hidden" id="capture-section">
            <h2 class="text-xl font-semibold mb-4">Capture Attendance</h2>
            <div class="flex flex-col items-center">
                <div class="w-full md:w-2/3 lg:w-1/2">
                    <div class="relative">
                        <video id="video" autoplay muted class="w-full rounded-lg shadow-lg hidden"></video>
                        <canvas id="canvas" class="hidden"></canvas>
                    </div>
                    <div id="status">click below to start camera</div>
                    <div class="mt-4 flex justify-center gap-4">
                        <button class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600" id="capture">Capture</button>
                        <button class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 hidden" id="stop">Stop Camera</button>
                    </div>
                </div>
            </div>
        </section>

        <section class="mt-8 bg-white p-6 rounded-lg shadow-lg hidden" id="attendance-section">
            <h2 class="text-xl font-semibold mb-4">Attendance Records</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full bg-white" id="attendance-table">
                    <thead>
                        <tr>
                            <th class="py-2 px-4 border-b border-gray-200 bg-gray-100">Name</th>
                            <th class="py-2 px-4 border-b border-gray-200 bg-gray-100">Date</th>
                            <th class="py-2 px-4 border-b border-gray-200 bg-gray-100">Status</th>
                        </tr>
                    </thead>
                    <tbody id="attendance-table-body">
                        <!-- Rows will be dynamically added here -->
                    </tbody>
                </table>
            </div>
        </section>
    </main>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    
    statusText = document.getElementById('status');
    const captureSection = document.getElementById('capture-section');
    const attendanceSection = document.getElementById('attendance-section');
    const attendanceTableBody = document.getElementById('attendance-table-body');
    const viewAttendanceButton = document.getElementById('view-attendance');
    const takeAttendanceButton = document.getElementById("take-attendance");
    const departmentSelect = document.getElementById("department");
    let selectedDepartmentId = null;
    let userEmbeddings = null;

    // Event listener for department selection
    departmentSelect.addEventListener('change', () => {
        selectedDepartmentId = departmentSelect.value;  // Get the selected department ID
    });

    // Event listener for the "View Attendance" button
    viewAttendanceButton.addEventListener('click', async () => {
        if (selectedDepartmentId) {
            const response = await fetch(`/attendance/get_attendance?department_id=${selectedDepartmentId}`);
            const data = await response.json();
            
            if (data.error) {
                alert(data.error);
                return;
            }

            const tableBody = document.getElementById("attendance-table-body");
            tableBody.innerHTML = '';  // Clear any existing rows

            
            attendanceSection.classList.remove("hidden");
            attendanceTableBody.classList.remove("hidden");

            data.attendance.forEach(entry => {
                const row = document.createElement("tr");

                const nameCell = document.createElement("td");
                nameCell.textContent = entry.student_name;
                nameCell.classList.add("border-b", "p-2");

                const dateCell = document.createElement("td");
                dateCell.textContent = entry.date;
                dateCell.classList.add("border-b", "p-2");

                const statusCell = document.createElement("td");
                statusCell.textContent = entry.status;
                statusCell.classList.add("border-b", "p-2");

                row.appendChild(nameCell);
                row.appendChild(dateCell);
                row.appendChild(statusCell);
                tableBody.appendChild(row);
            });
        } else {
            alert("No users in the selected department");
        }
    });

    // Event listener for the "Take Attendance" button
    takeAttendanceButton.addEventListener('click', async () => {
        if (selectedDepartmentId) {
            console.log("Selected department ID:", selectedDepartmentId);
            const response = await fetch(`/face_recognition/get_face_embeddings?department_id=${selectedDepartmentId}`);
            const data = await response.json();

            const userEmbeddings = data;
            console.log("Fetched user embeddings:", userEmbeddings);
            captureSection.classList.remove('hidden');
            // startCamera(userEmbeddings);
        } else {
            alert("Please select a department first.");
        }
    });





</script>
<script>
    // const video = captureSection.querySelector('#video');
    const captureButton = captureSection.querySelector('#capture');
    const stopButton = captureSection.querySelector('#stop');
    let video;
    let streaming = false;
    let canvas;
    let context;

    async function setupCamera() {
        statusText.textContent = 'Setting up camera...';
        video = document.getElementById('video');
        canvas = document.getElementById('canvas');
        context = canvas.getContext('2d');
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            startVideo();
        });
        // Load Haar Cascade for face detection
        cascadeClassifier = new cv.CascadeClassifier();
        cascadeClassifier.load('haarcascade_frontalface_default.xml');

        document.getElementById('capture').addEventListener('click', startVideo);
        document.getElementById('stop').addEventListener('click', stopVideo);

    }

    function startVideo() {
        if (!streaming) {
            streaming = true;
            document.getElementById('status').innerText = 'Camera is running...';
            requestAnimationFrame(detectFace);
        }
    }

    function stopVideo() {
        streaming = false;
        document.getElementById('status').innerText = 'Camera stopped';
    }

    async function detectFace() {
        if (!streaming) return;

        context.drawImage(video, 0, 0, canvas.width, canvas.height);
        const src = cv.imread(canvas);
        const gray = new cv.Mat();
        cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY);

        // Detect faces
        const faces = new cv.RectVector();
        cascadeClassifier.detectMultiScale(gray, faces, 1.1, 3, 0);
        
        // Draw rectangles around detected faces
        for (let i = 0; i < faces.size(); i++) {
            const point1 = new cv.Point(faces.get(i).x, faces.get(i).y);
            const point2 = new cv.Point(faces.get(i).x + faces.get(i).width, faces.get(i).y + faces.get(i).height);
            cv.rectangle(src, point1, point2, [255, 0, 0, 255]);
        }

        cv.imshow(canvas, src);
        src.delete();
        gray.delete();
        faces.delete();

        requestAnimationFrame(detectFace);
    }
    // async function loadModels() {
    //     // Load the Haar Cascade classifier for face detection
    //     return new Promise((resolve) => {
    //         cv.onRuntimeInitialized = () => {
    //             // Load the Haar Cascade XML file for face detection
    //             cv.FS_createDataFile('/', 'haarcascade_frontalface_default.xml', 
    //                 await (fetch('/static/models/haarcascade_frontalface_default.xml')).blob(), true, false);
    //             resolve();
    //         };
    //     });
    // }

    // async function detectFace() {
    //     context.clearRect(0, 0, canvas.width, canvas.height);
    //     let src = cv.imread(video);
    //     let dst = new cv.Mat();
    //     let gray = new cv.Mat();
    //     cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY);

    //     // Load the Haar Cascade
    //     let faceCascade = new cv.CascadeClassifier();
    //     faceCascade.load('haarcascade_frontalface_default.xml');

    //     // Detect faces
    //     let faces = new cv.RectVector();
    //     faceCascade.detectMultiScale(gray, faces, 1.1, 3, 0);

    //     // Draw rectangles around detected faces
    //     for (let i = 0; i < faces.size(); i++) {
    //         let face = faces.get(i);
    //         context.strokeStyle = 'red';
    //         context.lineWidth = 2;
    //         context.strokeRect(face.x, face.y, face.width, face.height);
    //     }

    //     src.delete();
    //     gray.delete();
    //     dst.delete();
    //     faces.delete();
    //     requestAnimationFrame(detectFace);
        
    // }


    captureButton.addEventListener('click', () => {
        statusText.textContent = 'Capturing attendance...';
        setupCamera();
        video.classList.remove("hidden");
        canvas.classList.remove("hidden");
        // if (!stream) {
        //     startCamera();
        // } else {
        //     stopCamera();
        //     startCamera();
        // }
    });

    stopButton.addEventListener('click', stopCamera);

    // Function to start the camera
    const startCamera = async () => {
        try {
            stream = await navigator.mediaDevices.getUserMedia({ video: true });
            video.srcObject = stream;
            statusText.textContent = 'Camera is ready. Ready to capture attendance!';
            video.classList.remove('hidden');
            stopButton.classList.remove('hidden');
            captureButton.textContent = 'Restart Camera';
            captureFace();
        } catch (error) {
            statusText.textContent = 'Error accessing the camera. Please check your device.';
            console.error('Error accessing camera:', error);
            alert('Unable to access the camera. Please check your browser settings and permissions.');
        }
    };

    // Function to stop the camera
    const stopCamera = () => {
        if (stream) {
            stream.getTracks().forEach((track) => track.stop());
            video.srcObject = null;
            video.classList.add('hidden');
            stopButton.classList.add('hidden');
            captureButton.textContent = 'Capture';
            stream = null;
        }
    };

    // Function to simulate face detection
    // const simulateFaceDetection = () => {
    //     const recognizedFace = { name: "Alice Johnson", date: new Date().toISOString().split('T')[0], status: "Present" };
    //     addAttendanceToTable(recognizedFace);
    //     saveAttendanceToDatabase(recognizedFace);
    // };

    const addAttendanceToTable = (faceData) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td class="py-2 px-4 border-b border-gray-200">${faceData.name}</td>
            <td class="py-2 px-4 border-b border-gray-200">${faceData.date}</td>
            <td class="py-2 px-4 border-b border-gray-200">${faceData.status}</td>
        `;
        attendanceTableBody.appendChild(row);
    };

    const saveAttendanceToDatabase = async (faceData) => {
        try {
            const response = await fetch('/save_attendance', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(faceData),
            });

            if (!response.ok) {
                throw new Error('Failed to save attendance');
            }
        } catch (error) {
            console.error('Error saving attendance:', error);
        }
    };

    const startFaceDetection = () => {
        setInterval(() => {
            simulateFaceDetection();
        }, 5000);
    };

    
    // Function to capture the current frame from the video and send it to the server for face recognition
    async function captureFace() {
        statusText.innerText = "Status: Capturing face...";
        
        const video = document.getElementById("cameraFeed");
        const canvas = document.createElement("canvas");
        const context = canvas.getContext("2d");

        // Capture the video frame
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        context.drawImage(video, 0, 0, canvas.width, canvas.height);

        // Convert the captured image to Base64 format
        const imageData = canvas.toDataURL("image/jpeg");

        // Get selected department ID from the frontend (make sure this value is obtained dynamically)
        const selectedDepartmentId = document.getElementById("departmentSelect").value;

        statusText.innerText = "Status: Sending image to the server...";

        try {
            // Send the captured image and department ID to the server
            const response = await fetch('/face_recognition/capture_face/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCSRFToken(),  // Make sure CSRF token is included if needed
                },
                body: JSON.stringify({ image: imageData, dept_id: selectedDepartmentId })
            });

            // Handle the server response
            const data = await response.json();

            if (response.ok) {
                statusText.innerText = "Status: Face registered successfully!";
                alert("Face registered successfully!");
            } else {
                statusText.innerText = `Status: Error - ${data.message}`;
                alert(`Error: ${data.message}`);
            }
        } catch (error) {
            statusText.innerText = "Status: Error sending data.";
            console.error("Error:", error);
        }
    }


</script>

{% endblock %}



admin_attendance

{% extends "admin_base.html" %}

{% block title %}Attendance Management - InstaMark{% endblock %}

<!-- <div class="sidebar">
    {% block sidebar %}
    <a href="{% url 'manAttendance' %}">
        <i class="fas fa-tachometer-alt"></i>
        <span>Manage Attendance</span>
    </a>
    <a href="{% url 'reports' %}">
        <i class="fas fa-calendar-check"></i>
        <span>Reports</span>
    </a>
    <a href="{% url 'logout' %}">
        <i class="fas fa-sign-out-alt"></i>
        <span>Logout</span>
    </a>
    {% endblock %}
</div> -->

{% block content %}

<script src="https://cdn.tailwindcss.com">
</script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;display=swap" rel="stylesheet"/>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.9/xlsx.full.min.js">
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js">
</script>
    <style>
        #status {
            margin-top: 10px;
            font-size: 16px;
            color: #666;
        }
        button {
            font-size: 1rem;
            font-weight: 600;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        button:hover {
            transform: scale(1.05); /* Slight zoom effect on hover */
        }

        button:active {
            transform: scale(0.95); /* Slight shrink effect on click */
        }

        #capture {
            background-color: #3b82f6; /* Blue */
        }

        #capture:hover {
            background-color: #2563eb; /* Darker blue */
        }

        #stop {
            background-color: #ef4444; /* Red */
        }

        #stop:hover {
            background-color: #dc2626; /* Darker red */
        }

    </style>
</head>
<body class="bg-gray-100 font-roboto">
<div class="container mx-auto p-4">
 <header class="flex justify-between items-center py-4">
  <h1 class="text-2xl font-bold">
   Attendance Management
  </h1>
 </header>
 <main class="mt-8">
  <section class="bg-white p-6 rounded-lg shadow-lg">
   <h2 class="text-xl font-semibold mb-4">
    Manage Attendance
   </h2>
   <div class="flex flex-col items-center">
    <div class="w-full md:w-2/3 lg:w-1/2">
     <select class="w-full p-2 border border-gray-300 rounded-lg mb-4" id="department" name="department" required>
        <option value="">Select Department</option> 
        {% for department in departments %}
        <option value="{{ department.id }}">{{ department.name }}</option>
        {% endfor %}
     </select>
     <button class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600" id="view-attendance">
      View Attendance
     </button>
     <button class="mt-4 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600" id="take-attendance">
      Take Attendance
     </button>
    </div>
   </div>
  </section>
  <!-- <section class="mt-8 bg-white p-6 rounded-lg shadow-lg hidden" id="attendance-section">
   <h2 class="text-xl font-semibold mb-4">
    Attendance Records
   </h2>
   <div class="overflow-x-auto">
    <table class="min-w-full bg-white" id="attendance-table">
     <thead>
      <tr>
       <th class="py-2 px-4 border-b border-gray-200 bg-gray-100">
        Name
       </th>
       <th class="py-2 px-4 border-b border-gray-200 bg-gray-100">
        Date
       </th>
       <th class="py-2 px-4 border-b border-gray-200 bg-gray-100">
        Status
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class="py-2 px-4 border-b border-gray-200">
        Alice Johnson
       </td>
       <td class="py-2 px-4 border-b border-gray-200">
        2023-10-01
       </td>
       <td class="py-2 px-4 border-b border-gray-200">
        Present
       </td>
      </tr>
      <tr>
       <td class="py-2 px-4 border-b border-gray-200">
        Bob Brown
       </td>
       <td class="py-2 px-4 border-b border-gray-200">
        2023-10-01
       </td>
       <td class="py-2 px-4 border-b border-gray-200">
        Present
       </td>
      </tr>
      <tr>
       <td class="py-2 px-4 border-b border-gray-200">
        Jane Smith
       </td>
       <td class="py-2 px-4 border-b border-gray-200">
        2023-10-01
       </td>
       <td class="py-2 px-4 border-b border-gray-200">
        Absent
       </td>
      </tr>
      <tr>
       <td class="py-2 px-4 border-b border-gray-200">
        John Doe
       </td>
       <td class="py-2 px-4 border-b border-gray-200">
        2023-10-01
       </td>
       <td class="py-2 px-4 border-b border-gray-200">
        Present
       </td>
      </tr>
     </tbody>
    </table>
   </div>
   <div class="mt-4 flex justify-end space-x-4">
    <button class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600" id="download-excel">
     Download Excel
    </button>
    <button class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600" id="download-pdf">
     Download PDF
    </button>
   </div>
  </section>
  <section class="mt-8 bg-white p-6 rounded-lg shadow-lg hidden" id="analysis-section">
   <h2 class="text-xl font-semibold mb-4">
    Attendance Analysis
   </h2>
   <div class="flex flex-col items-center">
    <div class="w-full md:w-2/3 lg:w-1/2">
     <canvas id="attendanceChart">
     </canvas>
    </div>
   </div>
  </section> -->
  <section class="mt-8 bg-white p-6 rounded-lg shadow-lg hidden" id="capture-section">
   <h2 class="text-xl font-semibold mb-4">
    Capture Attendance
   </h2>
   <div class="flex flex-col items-center">
    <div class="w-full md:w-2/3 lg:w-1/2">
        <div class="relative">
            <video id="video" autoplay playsinline class="w-full rounded-lg shadow-lg hidden" ></video>
            <canvas id="canvas" class="hidden"></canvas>
        </div>
        <div id="status">Initializing camera...</div>
        <div class="mt-4 flex justify-center gap-4">
            <button class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600" id="capture">
                Capture
            </button>
            <button class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 hidden" id="stop">
                Stop Camera
            </button>
        </div>
    </div>
   </div>
  </section>
  <!-- Attendance Section - Hidden initially -->
<section class="mt-8 bg-white p-6 rounded-lg shadow-lg hidden" id="attendance-section">
    <h2 class="text-xl font-semibold mb-4">Attendance Records</h2>
    <div class="overflow-x-auto">
     <table class="min-w-full bg-white" id="attendance-table">
      <thead>
       <tr>
        <th class="py-2 px-4 border-b border-gray-200 bg-gray-100">Name</th>
        <th class="py-2 px-4 border-b border-gray-200 bg-gray-100">Date</th>
        <th class="py-2 px-4 border-b border-gray-200 bg-gray-100">Status</th>
       </tr>
      </thead>
      <tbody id="attendance-table-body">
       <!-- Rows will be dynamically added here -->
      </tbody>
     </table>
    </div>
 </section>
 </main>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js">
</script>
<script>
    statusText = document.getElementById('status');
    const attendanceTableBody = document.getElementById('attendance-table-body');
    const viewAttendanceButton = document.getElementById('view-attendance');
    const takeAttendanceButton = document.getElementById("take-attendance");
    const departmentSelect = document.getElementById("department");
    let selectedDepartmentId = null;

    // Event listener for department selection
    departmentSelect.addEventListener('change', () => {
        selectedDepartmentId = departmentSelect.value;  // Get the selected department ID
    });

    // Event listener for the "View Attendance" button
    viewAttendanceButton.addEventListener('click', async () => {
        if (selectedDepartmentId) {
            // Send a request to fetch the attendance data of users from the selected department
            const response = await fetch(`/attendance/get_attendance?department_id=${selectedDepartmentId}`);
            const data = await response.json();
            
            if (data.error) {
                alert(data.error);
                return;
            }

            // Populate the attendance table with the fetched data
            const tableBody = document.getElementById("attendance-table-body");
            tableBody.innerHTML = '';  // Clear any existing rows

            data.attendance.forEach(entry => {
                const row = document.createElement("tr");

                const nameCell = document.createElement("td");
                nameCell.textContent = entry.student_name;
                nameCell.classList.add("border-b", "p-2");

                const dateCell = document.createElement("td");
                dateCell.textContent = entry.date;
                dateCell.classList.add("border-b", "p-2");

                const statusCell = document.createElement("td");
                statusCell.textContent = entry.status;
                statusCell.classList.add("border-b", "p-2");

                row.appendChild(nameCell);
                row.appendChild(dateCell);
                row.appendChild(statusCell);
                tableBody.appendChild(row);
            });

            // Show the table containing attendance data
            attendanceTableBody.classList.remove("hidden");
        } else {
            alert("No users in the selected department");
        }
    });

    // Event listener for the "Take Attendance" button
    takeAttendanceButton.addEventListener('click', async () => {
        if (selectedDepartmentId) {
            console.log("Selected department ID:", selectedDepartmentId);
            // Send a request to fetch the face embeddings of users from the selected department
            const response = await fetch(`/attendance/get_face_embeddings?department_id=${selectedDepartmentId}`);
            const data = await response.json();
            
            // Store the fetched embeddings for use in face recognition
            const userEmbeddings = data;
            console.log("Fetched user embeddings:", userEmbeddings);

            // Start the camera or the recognition process after fetching embeddings
            startCamera(userEmbeddings);
        } else {
            alert("Please select a department first.");
        }
    });

</script>
<script>
    const captureSection = document.getElementById('capture-section');
    const attendanceSection = document.getElementById('attendance-section');
    const video = captureSection.querySelector('#video');
    const captureButton = captureSection.querySelector('#capture');
    const stopButton = captureSection.querySelector('#stop');
    let stream = null; // Store media stream
    let detectedFaces = []; // Array to store recognized faces

    // Function to start the camera
    const startCamera = async () => {
        try {
            stream = await navigator.mediaDevices.getUserMedia({ video: true }); // Request access to the camera
            video.srcObject = stream; // Assign the stream to the video element
            statusText.textContent = 'Camera is ready. Ready to capture attendance!';
            video.classList.remove('hidden'); // Show video feed
            stopButton.classList.remove('hidden'); // Show stop button
            captureButton.textContent = 'Restart Camera'; // Update capture button text
            startFaceDetection(); // Start face detection once the camera is active
        } catch (error) {
            statusText.textContent = 'Error accessing the camera. Please check your device.';
            console.error('Error accessing camera:', error);
            alert('Unable to access the camera. Please check your browser settings and permissions.');
        }
    };

    // Function to stop the camera
    const stopCamera = () => {
        if (stream) {
            stream.getTracks().forEach((track) => track.stop()); // Stop all media tracks
            video.srcObject = null; // Clear the video element source
            video.classList.add('hidden'); // Hide the video element
            stopButton.classList.add('hidden'); // Hide stop button
            captureButton.textContent = 'Capture'; // Reset capture button text
            stream = null; // Reset the stream variable
        }
    };

    // Function to simulate face detection (replace with dlib in real scenario)
        // const simulateFaceDetection = () => {
        //     // Simulated recognized face data
        //     const recognizedFace = { name: "Alice Johnson", date: new Date().toISOString().split('T')[0], status: "Present" };

        //     // Add to the attendance table
        //     addAttendanceToTable(recognizedFace);

        //     // Send the recognized face data to backend to save in the database
        //     saveAttendanceToDatabase(recognizedFace);
        // };

    // Function to add attendance data to the table
    const addAttendanceToTable = (faceData) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td class="py-2 px-4 border-b border-gray-200">${faceData.name}</td>
            <td class="py-2 px-4 border-b border-gray-200">${faceData.date}</td>
            <td class="py-2 px-4 border-b border-gray-200">${faceData.status}</td>
        `;
        attendanceTableBody.appendChild(row);
    };

    // Function to send attendance data to the backend
    const saveAttendanceToDatabase = async (faceData) => {
        try {
            const response = await fetch('/save_attendance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(faceData), // Sending faceData to the backend
            });

            if (!response.ok) {
                throw new Error('Failed to save attendance');
            }
        } catch (error) {
            console.error('Error saving attendance:', error);
        }
    };

    // Start face detection (this is just a simulation - replace with actual detection logic)
    const startFaceDetection = () => {
        setInterval(() => {
            // Simulate face detection every 5 seconds
            simulateFaceDetection();
        }, 5000); // Detect every 5 seconds
    };

    // Event listener for Capture button inside Capture Attendance section
    captureButton.addEventListener('click', () => {
        statusText.textContent = 'Capturing attendance...';
        if (!stream) {
            startCamera(); // Activate the camera
        } else {
            stopCamera(); // Stop the camera if already active
            startCamera(); // Restart the camera
        }
    });

    // Event listener for Stop button
    stopButton.addEventListener('click', stopCamera);

        // Event listener for Take Attendance button
    document.getElementById('take-attendance').addEventListener('click', () => {
        captureSection.classList.remove('hidden'); // Show the Capture section
        attendanceSection.classList.remove('hidden'); // Show the Attendance table section

        // Optionally, you can hide other sections (if needed)
        // document.getElementById('analysis-section').classList.add('hidden');
        // document.getElementById('captured-faces-section').classList.add('hidden');
    });

</script>

<script>
      // const analysisSection = document.getElementById('analysis-section');
    //   const capturedFacesSection = document.getElementById('captured-faces-section');
    //   const downloadExcelButton = document.getElementById('download-excel');
    //   const downloadPdfButton = document.getElementById('download-pdf');

      viewAttendanceButton.addEventListener('click', () => {
          if (departmentSelect.value) {
              attendanceSection.classList.remove('hidden');
              // analysisSection.classList.remove('hidden');
              captureSection.classList.add('hidden');
              // capturedFacesSection.classList.add('hidden');

              // Example data for the chart
              const data = {
                  labels: ['2023-10-01', '2023-10-02', '2023-10-03', '2023-10-04', '2023-10-05'],
                  datasets: [{
                      label: 'Present',
                      data: [10, 12, 8, 15, 9],
                      backgroundColor: 'rgba(75, 192, 192, 0.2)',
                      borderColor: 'rgba(75, 192, 192, 1)',
                      borderWidth: 1
                  }, {
                      label: 'Absent',
                      data: [2, 1, 3, 0, 2],
                      backgroundColor: 'rgba(255, 99, 132, 0.2)',
                      borderColor: 'rgba(255, 99, 132, 1)',
                      borderWidth: 1
                  }]
              };

              const config = {
                  type: 'bar',
                  data: data,
                  options: {
                      scales: {
                          y: {
                              beginAtZero: true
                          }
                      }
                  }
              };

            //   const attendanceChart = new Chart(
            //       document.getElementById('attendanceChart'),
            //       config
            //   );
          } else {
              alert('Please select a department.');
          }
      });

      takeAttendanceButton.addEventListener('click', () => {
          if (departmentSelect.value) {
              captureSection.classList.remove('hidden');
              // capturedFacesSection.classList.remove('hidden');
              attendanceSection.classList.add('hidden');
              // analysisSection.classList.add('hidden');

              // Access the camera and display the video feed
              navigator.mediaDevices.getUserMedia({ video: true })
                  .then(stream => {
                      video.srcObject = stream;
                  })
                  .catch(err => {
                      console.error("Error accessing the camera: ", err);
                  });
          } else {
              alert('Please select a department.');
          }
      });

    //   downloadExcelButton.addEventListener('click', () => {
    //       const table = document.getElementById('attendance-table');
    //       const wb = XLSX.utils.table_to_book(table, { sheet: "Sheet JS" });
    //       XLSX.writeFile(wb, 'Attendance.xlsx');
    //   });

    //   downloadPdfButton.addEventListener('click', () => {
    //       const { jsPDF } = window.jspdf;
    //       const doc = new jsPDF();
    //       doc.autoTable({ html: '#attendance-table' });
    //       doc.save('Attendance.pdf');
    //   });

</script>


{% endblock %}


home.html

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="icon" href="{% static 'img/favicon.ico' %}" type="image/x-icon">

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>InstaMark - Automated Attendance System</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
        .hero {
            background-image: url('static/img/bg.png');
            background-size: cover;
            background-position: center;
            color: white;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
        }
        .cta-btn {
            background-color: #ff6f61;
            color: white;
            padding: 10px 20px;
            font-size: 18px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .cta-btn:hover {
            background-color: #e05e50;
        }
        .feature-icon {
            font-size: 50px;
            color: #ff6f61;
        }
        footer {
            background-color: #f8f9fa;
            padding: 30px 0;
        }
    </style>
</head>
<body>
    <!-- Hero Section -->
    <div class="hero">
        <div>
            <h1>Automate Your Attendance with AI</h1>
            <p>Track and manage attendance effortlessly using cutting-edge facial recognition technology</p>
            <button class="cta-btn">Get Started</button>
        </div>
    </div>

    <!-- Features Section -->
    <div class="container py-5">
        <h2 class="text-center mb-4">Features</h2>
        <div class="row">
            <div class="col-md-4 text-center">
                <div class="feature-icon">
                    <i class="fas fa-camera"></i>
                </div>
                <h4>Face Recognition</h4>
                <p>Effortlessly track attendance with advanced face recognition technology.</p>
            </div>
            <div class="col-md-4 text-center">
                <div class="feature-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
                <h4>Custom Reports</h4>
                <p>Generate reports that match your specific needs and criteria.</p>
            </div>
            <div class="col-md-4 text-center">
                <div class="feature-icon">
                    <i class="fas fa-cogs"></i>
                </div>
                <h4>Easy Integration</h4>
                <p>Integrate with HR systems and other business tools effortlessly.</p>
            </div>
        </div>
    </div>

    <!-- Footer Section -->
    <footer>
        <div class="container text-center">
            <p>&copy; 2024 InstaMark. All rights reserved.</p>
            <p>Follow us on:
                <a href="#" class="text-decoration-none">Facebook</a> |
                <a href="#" class="text-decoration-none">Twitter</a> |
                <a href="#" class="text-decoration-none">LinkedIn</a>
            </p>
        </div>
    </footer>

    <!-- Bootstrap JS and FontAwesome for Icons -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://kit.fontawesome.com/a076d05399.js"></script>
</body>
</html>

signup

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up - InstaMark</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>

<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <a class="navbar-brand" href="#">InstaMark</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ml-auto">
            <li class="nav-item">
                <a class="nav-link" href="{% url 'login' %}">Login</a>
            </li>
        </ul>
    </div>
</nav>

<!-- Sign Up Section -->
<div class="container mt-5">
    <h2 class="text-center">Create an Account</h2>
    <form method="POST" class="mt-4">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary btn-block">Sign Up</button>
    </form>

    <p class="text-center mt-3">Already have an account? <a href="{% url 'login' %}">Login</a> here</p>

    {% if messages %}
        <div class="alert alert-success mt-3">
            {% for message in messages %}
                <p>{{ message }}</p>
            {% endfor %}
        </div>
    {% endif %}
</div>

<!-- Scripts -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.1/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

</body>
</html>

admin Dashboard

<html lang="en">
 <head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <title>
   InstaMark Admin Dashboard
  </title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&amp;display=swap" rel="stylesheet"/>
  <style>
   body {
            font-family: 'Roboto', sans-serif;
            background-color: #F4F4F4;
            margin: 0;
            padding: 0;
        }
        header {
            background-color: #007BFF;
            color: white;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        header .logo {
            font-size: 1.5em;
            font-weight: 700;
        }
        header .profile {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-left: auto;
        }
        header .profile img {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
        }
        header .profile .dropdown {
            position: relative;
        }
        header .profile .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            z-index: 1;
        }
        header .profile .dropdown-content a {
            color: #333;
            padding: 10px 20px;
            text-decoration: none;
            display: block;
        }
        header .profile .dropdown-content a:hover {
            background-color: #f1f1f1;
        }
        header .profile .dropdown:hover .dropdown-content {
            display: block;
        }
        header .notifications {
            position: relative;
        }
        header .notifications .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: rgb(0, 0, 0);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            z-index: 1;
            width: 300px;
        }
        header .notifications .dropdown-content ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        header .notifications .dropdown-content ul li {
            padding: 10px 20px;
            border-bottom: 1px solid #000000;
        }
        header .notifications .dropdown-content ul li:last-child {
            border-bottom: none;
        }
        header .notifications .dropdown-content ul li:hover {
            background-color: #000000;
        }
        header .notifications:hover .dropdown-content {
            display: block;
        }
        .sidebar {
            width: 60px;
            background-color: #007BFF;
            color: white;
            position: fixed;
            top: 60px;
            bottom: 0;
            padding: 20px 0;
            overflow-y: auto;
            transition: width 0.3s;
        }
        .sidebar:hover {
            width: 250px;
        }
        .sidebar a {
            color: white;
            text-decoration: none;
            display: flex;
            align-items: center;
            padding: 10px 20px;
            gap: 10px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .sidebar a i {
            font-size: 1.5em;
            width: 40px;
            text-align: center;
        }
        .sidebar a span {
            display: none;
            transition: display 0.3s;
        }
        .sidebar:hover a span {
            display: inline;
        }
        .sidebar a:hover, .sidebar a.active {
            background-color: #0056b3;
        }
        .main-content {
            margin-left: 60px;
            padding: 20px;
            transition: margin-left 0.3s;
        }
        .sidebar:hover ~ .main-content {
            margin-left: 250px;
        }
        .card {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        .card .card-title {
            font-size: 1.2em;
            margin-bottom: 10px;
        }
        .card .card-content {
            display: flex;
            align-items: center;
            gap: 20px;
        }
        .card .card-content i {
            font-size: 2em;
            color: #007BFF;
        }
        .card .card-content .number {
            font-size: 2em;
            font-weight: 700;
        }
        .chart {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        .table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        .table th, .table td {
            padding: 10px;
            border: 1px solid #ddd;
        }
        .table th {
            background-color: #f1f1f1;
        }
        .table .actions {
            display: flex;
            gap: 10px;
        }
        .table .actions i {
            cursor: pointer;
        }
        .footer {
            background-color: #007BFF;
            color: white;
            text-align: center;
            padding: 10px 20px;
            position: fixed;
            bottom: 0;
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .footer a {
            color: white;
            text-decoration: none;
            margin: 0 10px;
        }
        .footer .social-icons {
            margin-left: 200px;
            margin-right: 40px;
        }
        .footer .social-icons i {
            margin: 0 5px;
        }
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            .main-content {
                margin-left: 0;
            }
            .footer {
                flex-direction: column;
                gap: 10px;
            }
            .footer .social-icons {
                margin-left: 0;
            }
        }
  </style>
 </head>
 <body>
  <header>
   <div class="logo">
    InstaMark
   </div>
   <div class="profile">
    <span class="username">Admin</span>
    <div class="notifications">
     <i class="fas fa-bell">
     </i>
     <div class="dropdown-content">
      <ul>
       <li>
        John Doe logged in at 10:00 AM
       </li>
       <li>
        Jane Smith marked as absent
       </li>
       <li>
        Michael Brown was late today
       </li>
      </ul>
     </div>
    </div>
    <div class="dropdown">
     <img alt="Profile picture of the logged-in admin" height="30" src="https://storage.googleapis.com/a1aa/image/u6Ug78MplcYTDJtFbvCliftLFhhAJkaiXmSVo6p036Twq18JA.jpg" width="30"/>
     <div class="dropdown-content">
      <a href="#">
       Profile Settings
      </a>
      <a href="{% url 'logout'%}">
       Logout
      </a>
     </div>
    </div>
   </div>
  </header>
  <div class="sidebar">
   <a class="active" href="#">
    <i class="fas fa-tachometer-alt">
    </i>
    <span>
     Dashboard
    </span>
   </a>
   <a href="#">
    <i class="fas fa-users">
    </i>
    <span>
     User Management
    </span>
   </a>
   <a href="#">
    <i class="fas fa-calendar-check">
    </i>
    <span>
     Attendance
    </span>
   </a>
   <a href="#">
    <i class="fas fa-chart-line">
    </i>
    <span>
     Attendance Reports
    </span>
   </a>
   <a href="#">
    <i class="fas fa-cogs">
    </i>
    <span>
     Settings
    </span>
   </a>
   <a href="#">
    <i class="fas fa-sign-out-alt">
    </i>
    <span>
     Logout
    </span>
   </a>
  </div>
  <div class="main-content">
   <div class="card">
    <div class="card-title">
     Overview
    </div>
    <div class="card-content">
     <div class="card">
      <i class="fas fa-users">
      </i>
      <div class="number">
       150
      </div>
      <div>
       Total Users
      </div>
     </div>
     <div class="card">
      <i class="fas fa-calendar-check">
      </i>
      <div class="number">
       120
      </div>
      <div>
       Attendance Today
      </div>
     </div>
     <div class="card">
      <i class="fas fa-user-check">
      </i>
      <div class="number">
       100
      </div>
      <div>
       Active Users
      </div>
     </div>
     <div class="card">
      <i class="fas fa-calendar-alt">
      </i>
      <div class="number">
       200
      </div>
      <div>
       Total Attendance Sessions
      </div>
     </div>
    </div>
   </div>
   <div class="chart">
    <div class="card-title">
     Attendance Overview
    </div>
    <canvas id="attendanceChart">
    </canvas>
   </div>
   <div class="card">
    <div class="card-title">
     User Management
    </div>
    <table class="table">
     <thead>
      <tr>
       <th>
        Name
       </th>
       <th>
        Role
       </th>
       <th>
        Attendance Status
       </th>
       <th>
        Last Active
       </th>
       <th>
        Actions
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        John Doe
       </td>
       <td>
        Admin
       </td>
       <td>
        Present
       </td>
       <td>
        Today
       </td>
       <td class="actions">
        <i class="fas fa-pencil-alt">
        </i>
        <i class="fas fa-trash">
        </i>
        <i class="fas fa-eye">
        </i>
       </td>
      </tr>
      <tr>
       <td>
        Jane Smith
       </td>
       <td>
        User
       </td>
       <td>
        Absent
       </td>
       <td>
        Yesterday
       </td>
       <td class="actions">
        <i class="fas fa-pencil-alt">
        </i>
        <i class="fas fa-trash">
        </i>
        <i class="fas fa-eye">
        </i>
       </td>
      </tr>
      <tr>
       <td>
        Michael Brown
       </td>
       <td>
        User
       </td>
       <td>
        Late
       </td>
       <td>
        Today
       </td>
       <td class="actions">
        <i class="fas fa-pencil-alt">
        </i>
        <i class="fas fa-trash">
        </i>
        <i class="fas fa-eye">
        </i>
       </td>
      </tr>
     </tbody>
    </table>
    <button>
     Add New User
    </button>
   </div>
   <div class="card">
    <div class="card-title">
     Notifications
    </div>
    <ul>
     <li>
      John Doe logged in at 10:00 AM
     </li>
     <li>
      Jane Smith marked as absent
     </li>
     <li>
      Michael Brown was late today
     </li>
    </ul>
   </div>
  </div>
  <footer class="footer">
   <div>
    © 2024 InstaMark. All Rights Reserved.
   </div>
   <div>
    <a href="#">
     Privacy Policy
    </a>
    <a href="#">
     Terms of Service
    </a>
    <a href="#">
     Support
    </a>
   </div>
   <div class="social-icons">
    <i class="fab fa-linkedin">
    </i>
    <i class="fab fa-twitter">
    </i>
    <i class="fab fa-facebook">
    </i>
   </div>
  </footer>
  <script src="https://cdn.jsdelivr.net/npm/chart.js">
  </script>
  <script>
   const ctx = document.getElementById('attendanceChart').getContext('2d');
        const attendanceChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
                datasets: [{
                    label: 'Present',
                    data: [12, 19, 3, 5, 2, 3, 7],
                    borderColor: '#007BFF',
                    backgroundColor: 'rgba(0, 123, 255, 0.1)',
                    fill: true
                }, {
                    label: 'Absent',
                    data: [2, 3, 20, 5, 1, 4, 2],
                    borderColor: '#FF9900',
                    backgroundColor: 'rgba(255, 153, 0, 0.1)',
                    fill: true
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        beginAtZero: true
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
  </script>
 </body>
</html>

dashboard_base

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
    <title>{% block title %}InstaMark Admin Dashboard{% endblock %}</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet"/>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #F4F4F4;
            margin: 0;
            padding: 0;
        }
        header {
            background-color: #007BFF;
            color: white;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        header .logo {
            font-size: 1.5em;
            font-weight: 700;
        }
        header .profile {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-left: auto;
        }
        header .profile img {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
        }
        header .profile .dropdown {
            position: relative;
        }
        header .profile .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            z-index: 1;
        }
        header .profile .dropdown-content a {
            color: #333;
            padding: 10px 20px;
            text-decoration: none;
            display: block;
        }
        header .profile .dropdown-content a:hover {
            background-color: #f1f1f1;
        }
        header .profile .dropdown:hover .dropdown-content {
            display: block;
        }
        header .notifications {
            position: relative;
        }
        header .notifications .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: rgb(0, 0, 0);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            z-index: 1;
            width: 300px;
        }
        header .notifications .dropdown-content ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        header .notifications .dropdown-content ul li {
            padding: 10px 20px;
            border-bottom: 1px solid #000000;
        }
        header .notifications .dropdown-content ul li:last-child {
            border-bottom: none;
        }
        header .notifications .dropdown-content ul li:hover {
            background-color: #000000;
        }
        header .notifications:hover .dropdown-content {
            display: block;
        }
        .sidebar {
            width: 60px;
            background-color: #007BFF;
            color: white;
            position: fixed;
            top: 60px;
            bottom: 0;
            padding: 20px 0;
            overflow-y: auto;
            transition: width 0.3s;
        }
        .sidebar:hover {
            width: 250px;
        }
        .sidebar a {
            color: white;
            text-decoration: none;
            display: flex;
            align-items: center;
            padding: 10px 20px;
            gap: 10px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .sidebar a i {
            font-size: 1.5em;
            width: 40px;
            text-align: center;
        }
        .sidebar a span {
            display: none;
            transition: display 0.3s;
        }
        .sidebar:hover a span {
            display: inline;
        }
        .sidebar a:hover, .sidebar a.active {
            background-color: #0056b3;
        }
        .main-content {
            margin-left: 60px;
            padding: 20px;
            transition: margin-left 0.3s;
        }
        .sidebar:hover ~ .main-content {
            margin-left: 250px;
        }
        .card {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        .card .card-title {
            font-size: 1.2em;
            margin-bottom: 10px;
        }
        .card .card-content {
            display: flex;
            align-items: center;
            gap: 20px;
        }
        .card .card-content i {
            font-size: 2em;
            color: #007BFF;
        }
        .card .card-content .number {
            font-size: 2em;
            font-weight: 700;
        }
        .chart {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        .table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        .table th, .table td {
            padding: 10px;
            border: 1px solid #ddd;
        }
        .table th {
            background-color: #f1f1f1;
        }
        .table .actions {
            display: flex;
            gap: 10px;
        }
        .table .actions i {
            cursor: pointer;
        }
        .footer {
            background-color: #007BFF;
            color: white;
            text-align: center;
            padding: 10px 20px;
            position: fixed;
            bottom: 0;
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .footer a {
            color: white;
            text-decoration: none;
            margin: 0 10px;
        }
        .footer .social-icons {
            margin-left: 200px;
            margin-right: 40px;
        }
        .footer .social-icons i {
            margin: 0 5px;
        }
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            .main-content {
                margin-left: 0;
            }
            .footer {
                flex-direction: column;
                gap: 10px;
            }
            .footer .social-icons {
                margin-left: 0;
            }
        }
    </style>
</head>
<body>
<header>
    <div class="logo">
        InstaMark
    </div>
    <div class="profile">
        <span class="username">{{ user }}</span>
        <div class="notifications">
            <i class="fas fa-bell"></i>
            <div class="dropdown-content">
                <ul>
                    <li>John Doe logged in at 10:00 AM</li>
                    <li>Jane Smith marked as absent</li>
                    <li>Michael Brown was late today</li>
                </ul>
            </div>
        </div>
        <div class="dropdown">
            <img alt="Profile picture of the logged-in admin" height="30" src="https://storage.googleapis.com/a1aa/image/u6Ug78MplcYTDJtFbvCliftLFhhAJkaiXmSVo6p036Twq18JA.jpg" width="30"/>
            <div class="dropdown-content">
                <a href="#">Profile Settings</a>
                <a href="{% url 'logout' %}">Logout</a>
            </div>
        </div>
    </div>
</header>
<div class="sidebar">
    <a href="{% url 'admin_dashboard'%}">
        <i class="fas fa-tachometer-alt"></i>
        <span>Dashboard</span>
    </a>
    <a href="{% url 'user_management' %}">
        <i class="fas fa-users"></i>
        <span>User Management</span>
    </a>
    <a href="{% url 'attendance' %}">
        <i class="fas fa-calendar-check"></i>
        <span>Attendance</span>
    </a>
    <a href="{% url 'reports' %}">
        <i class="fas fa-chart-line"></i>
        <span>Attendance Reports</span>
    </a>
    <a href="{% url 'settings' %}">
        <i class="fas fa-cogs"></i>
        <span>Settings</span>
    </a>
    <a href="{% url 'logout' %}">
        <i class="fas fa-sign-out-alt"></i>
        <span>Logout</span>
    </a>

</div>
<div class="main-content">
    {% block content %}
    <!-- Main content will be injected here -->
    {% endblock %}
</div>
<footer class="footer">
    <div>
        © 2024 InstaMark. All Rights Reserved.
    </div>
    <div>
        <a href="#">Privacy Policy</a>
        <a href="#">Terms of Service</a>
        <a href="#">Support</a>
    </div>
    <div class="social-icons">
        <i class="fab fa-linkedin"></i>
        <i class="fab fa-twitter"></i>
        <i class="fab fa-facebook"></i>
    </div>
</footer>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const ctx = document.getElementById('attendanceChart') ? document.getElementById('attendanceChart').getContext('2d') : null;
    if (ctx) {
        const attendanceChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
                datasets: [{
                    label: 'Present',
                    data: [12, 19, 3, 5, 2, 3, 7],
                    borderColor: '#007BFF',
                    backgroundColor: 'rgba(0, 123, 255, 0.1)',
                    fill: true
                }, {
                    label: 'Absent',
                    data: [2, 3, 20, 5, 1, 4, 2],
                    borderColor: '#FF9900',
                    backgroundColor: 'rgba(255, 153, 0, 0.1)',
                    fill: true
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        beginAtZero: true
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }
</script>
</body>
</html>

attendance

{% extends "dashboard_base.html" %}

{% block title %}Attendance Management - InstaMark{% endblock %}

{% block content %}
<div class="card">
    <div class="card-title">Attendance Management</div>
    <button id="markAttendanceBtn" style="margin-bottom: 20px;" onclick="openModal()">Mark Attendance</button>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="attendanceTableBody">
            <!-- Sample attendance records -->
            <tr>
                <td>John Doe</td>
                <td>2023-10-01</td>
                <td>Present</td>
                <td class="actions">
                    <i class="fas fa-pencil-alt" title="Edit" onclick="editAttendance(this)"></i>
                    <i class="fas fa-trash" title="Delete" onclick="removeAttendance(this)"></i>
                </td>
            </tr>
            <tr>
                <td>Jane Smith</td>
                <td>2023-10-01</td>
                <td>Absent</td>
                <td class="actions">
                    <i class="fas fa-pencil-alt" title="Edit" onclick="editAttendance(this)"></i>
                    <i class="fas fa-trash" title="Delete" onclick="removeAttendance(this)"></i>
                </td>
            </tr>
            <!-- More attendance records can be added here -->
        </tbody>
    </table>
</div>

<!-- Mark Attendance Modal -->
<div id="markAttendanceModal" style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); background:white; padding:20px; box-shadow:0 0 10px rgba(0,0,0,0.5); z-index:1000;">
    <h3>Mark Attendance</h3>
    <label for="attendanceName">Name:</label>
    <input type="text" id="attendanceName" required>
    <label for="attendanceDate">Date:</label>
    <input type="date" id="attendanceDate" required>
    <label for="attendanceStatus">Status:</label>
    <select id="attendanceStatus">
        <option value="Present">Present</option>
        <option value="Absent">Absent</option>
        <option value="Late">Late</option>
    </select>
    <button onclick="addAttendance()">Add Attendance</button>
    <button onclick="closeModal()">Cancel</button>
</div>

<div id="modalOverlay" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); z-index:999;"></div>

<script>
    function openModal() {
        document.getElementById('markAttendanceModal').style.display = 'block';
        document.getElementById('modalOverlay').style.display = 'block';
    }

    function closeModal() {
        document.getElementById('markAttendanceModal').style.display = 'none';
        document.getElementById('modalOverlay').style.display = 'none';
    }

    function addAttendance() {
        const name = document.getElementById('attendanceName').value;
        const date = document.getElementById('attendanceDate').value;
        const status = document.getElementById('attendanceStatus').value;

        if (name && date) {
            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td>${name}</td>
                <td>${date}</td>
                <td>${status}</td>
                <td class="actions">
                    <i class="fas fa-pencil-alt" title="Edit" onclick="editAttendance(this)"></i>
                    <i class="fas fa-trash" title="Delete" onclick="removeAttendance(this)"></i>
                </td>
            `;
            document.getElementById('attendanceTableBody').appendChild(newRow);
            closeModal(); // Close the modal after adding attendance
            document.getElementById('attendanceName').value = ''; // Clear the input field
            document.getElementById('attendanceDate').value = ''; // Clear the date field
        } else {
            alert('Please enter a name and date for the attendance record.');
        }
    }

    function removeAttendance(element) {
        const row = element.closest('tr');
        if (confirm('Are you sure you want to delete this attendance record?')) {
            row.remove(); // Remove the attendance row from the table
        }
    }

    function editAttendance(element) {
        const row = element.closest('tr');
        const name = row.cells[0].innerText;
        const date = row.cells[1].innerText;
        const status = row.cells[2].innerText;

        // Populate the modal with the current values
        document.getElementById('attendanceName').value = name;
        document.getElementById('attendanceDate').value = date;
        document.getElementById('attendanceStatus').value = status;

        // Change the button action to update instead of add
        const addButton = document.querySelector('#markAttendanceModal button:nth-child(1)');
        addButton.innerText = 'Update Attendance';
        addButton.setAttribute('onclick', `updateAttendance(this, '${row.rowIndex}')`);

        openModal(); // Open the modal for editing
    }

    function updateAttendance(button, rowIndex) {
        const name = document.getElementById('attendanceName').value;
        const date = document.getElementById('attendanceDate').value;
        const status = document.getElementById('attendanceStatus').value;

        if (name && date) {
            const row = document.getElementById('attendanceTableBody').rows[rowIndex];
            row.cells[0].innerText = name;
            row.cells[1].innerText = date;
            row.cells[2].innerText = status;

            closeModal(); // Close the modal after updating attendance
            document.getElementById('attendanceName').value = ''; // Clear the input field
            document.getElementById('attendanceDate').value = ''; // Clear the date field

            // Reset the button to add new attendance
            button.innerText = 'Add Attendance';
            button.setAttribute('onclick', 'addAttendance()');
        } else {
            alert('Please enter a name and date for the attendance record.');
        }
    }
</script>

{% endblock %}

admin_users
{% extends "admin_base.html" %}

{% block title %}User Management - InstaMark{% endblock %}

<div class="sidebar">
    {% block sidebar %}
    <a class="active" href="{% url 'admin_dashboard' %}">
        <i class="fas fa-tachometer-alt"></i>
        <span>Users</span>
    </a>
    {% endblock %}
</div>

{% block content %}
<html>
<head>
    <title>User Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f4f4f9;
            margin: 0;
            padding: 0;
        }
        .user-management {
            max-width: 1200px;
            margin: 50px auto;
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .user-management h1 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
        }
        .filter-panel {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        .filter-panel input, .filter-panel select, .filter-panel button {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 10px;
        }
        .filter-panel button {
            background-color: #007bff;
            color: #fff;
            border: none;
            cursor: pointer;
        }
        .filter-panel button:hover {
            background-color: #0056b3;
        }
        .user-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        .user-table th, .user-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        .user-table th {
            background-color: #f8f9fa;
            color: #333;
        }
        .user-table tr:hover {
            background-color: #f1f1f1;
        }
        .user-table button {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 5px;
        }
        .user-table button.edit {
            background-color: #ffc107;
            color: #fff;
        }
        .user-table button.delete {
            background-color: #dc3545;
            color: #fff;
        }
        .user-table button.register-face {
            background-color: #28a745;
            color: #fff;
        }
        .create-user-btn {
            display: block;
            width: 200px;
            margin: 0 auto;
            padding: 10px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-align: center;
        }
        .create-user-btn:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div class="user-management">
        <h1>User Management</h1>

        <div class="filter-panel">
            <input type="text" placeholder="Search by name, email, or username..." />
            <select>
                <option value="">Filter by Role</option>
                <option value="superuser">Superuser</option>
                <option value="staff">Staff</option>
                <option value="regular">Regular User</option>
            </select>
            <select>
                <option value="">Filter by Status</option>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
            </select>
            <button>Search</button>
        </div>

        <table class="user-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for user in users %}
                <tr>
                    <td>{{ user.id }}</td>
                    <td>{{ user.username }}</td>
                    <td>{{ user.first_name }} {{ user.last_name }}</td>
                    <td>{{ user.email }}</td>
                    <td>
                        {% if user.is_superuser %}
                            Superuser
                        {% elif user.is_staff %}
                            Staff
                        {% else %}
                            Regular User
                        {% endif %}
                    </td>
                    <td>{{ user.is_active|yesno:"Active,Inactive" }}</td>
                    <td>
                        <button class="edit">Edit</button>
                        <button class="delete">Delete</button>
                        <button class="register-face">Register Face</button>
                    </td>
                </tr>
                {% empty %}
                <tr>
                    <td colspan="7" style="text-align: center;">No users found.</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>

        <!-- Button to open Add User modal -->
        <button class="create-user-btn" onclick="openAddUserModal()">Create New User</button>
    </div>

    <!-- Add User Modal -->
    <div id="addUserModal" style="display:none;">
        <h2>Add New User</h2>
        <form method="POST" action="{% url 'add_user' %}">
            {% csrf_token %}
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
            
            <label for="first_name">First Name:</label>
            <input type="text" id="first_name" name="first_name" required>
            
            <label for="last_name">Last Name:</label>
            <input type="text" id="last_name" name="last_name" required>
            
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>
            
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
            
            <label for="role">Role:</label>
            <select id="role" name="role" required>
                <option value="superuser">Superuser</option>
                <option value="staff">Staff</option>
                <option value="regular">Regular User</option>
            </select>

            <label for="is_active">Active:</label>
            <select id="is_active" name="is_active" required>
                <option value="true">Yes</option>
                <option value="false">No</option>
            </select>

            <button type="submit">Add User</button>
            <button type="button" onclick="closeAddUserModal()">Cancel</button>
        </form>
    </div>

    <script>
        function openAddUserModal() {
            document.getElementById('addUserModal').style.display = 'block';
        }
        function closeAddUserModal() {
            document.getElementById('addUserModal').style.display = 'none';
        }
    </script>
</body>
</html>

{% endblock %}
